# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sdrplay
else:
    import _sdrplay

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sdrplay.delete_SwigPyIterator

    def value(self):
        return _sdrplay.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sdrplay.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sdrplay.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sdrplay.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sdrplay.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sdrplay.SwigPyIterator_copy(self)

    def next(self):
        return _sdrplay.SwigPyIterator_next(self)

    def __next__(self):
        return _sdrplay.SwigPyIterator___next__(self)

    def previous(self):
        return _sdrplay.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sdrplay.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sdrplay.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sdrplay.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sdrplay.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sdrplay.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sdrplay.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sdrplay.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sdrplay:
_sdrplay.SwigPyIterator_swigregister(SwigPyIterator)
class DeviceInfoVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sdrplay.DeviceInfoVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sdrplay.DeviceInfoVector___nonzero__(self)

    def __bool__(self):
        return _sdrplay.DeviceInfoVector___bool__(self)

    def __len__(self):
        return _sdrplay.DeviceInfoVector___len__(self)

    def __getslice__(self, i, j):
        return _sdrplay.DeviceInfoVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sdrplay.DeviceInfoVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sdrplay.DeviceInfoVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sdrplay.DeviceInfoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sdrplay.DeviceInfoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sdrplay.DeviceInfoVector___setitem__(self, *args)

    def pop(self):
        return _sdrplay.DeviceInfoVector_pop(self)

    def append(self, x):
        return _sdrplay.DeviceInfoVector_append(self, x)

    def empty(self):
        return _sdrplay.DeviceInfoVector_empty(self)

    def size(self):
        return _sdrplay.DeviceInfoVector_size(self)

    def swap(self, v):
        return _sdrplay.DeviceInfoVector_swap(self, v)

    def begin(self):
        return _sdrplay.DeviceInfoVector_begin(self)

    def end(self):
        return _sdrplay.DeviceInfoVector_end(self)

    def rbegin(self):
        return _sdrplay.DeviceInfoVector_rbegin(self)

    def rend(self):
        return _sdrplay.DeviceInfoVector_rend(self)

    def clear(self):
        return _sdrplay.DeviceInfoVector_clear(self)

    def get_allocator(self):
        return _sdrplay.DeviceInfoVector_get_allocator(self)

    def pop_back(self):
        return _sdrplay.DeviceInfoVector_pop_back(self)

    def erase(self, *args):
        return _sdrplay.DeviceInfoVector_erase(self, *args)

    def __init__(self, *args):
        _sdrplay.DeviceInfoVector_swiginit(self, _sdrplay.new_DeviceInfoVector(*args))

    def push_back(self, x):
        return _sdrplay.DeviceInfoVector_push_back(self, x)

    def front(self):
        return _sdrplay.DeviceInfoVector_front(self)

    def back(self):
        return _sdrplay.DeviceInfoVector_back(self)

    def assign(self, n, x):
        return _sdrplay.DeviceInfoVector_assign(self, n, x)

    def resize(self, *args):
        return _sdrplay.DeviceInfoVector_resize(self, *args)

    def insert(self, *args):
        return _sdrplay.DeviceInfoVector_insert(self, *args)

    def reserve(self, n):
        return _sdrplay.DeviceInfoVector_reserve(self, n)

    def capacity(self):
        return _sdrplay.DeviceInfoVector_capacity(self)
    __swig_destroy__ = _sdrplay.delete_DeviceInfoVector

# Register DeviceInfoVector in _sdrplay:
_sdrplay.DeviceInfoVector_swigregister(DeviceInfoVector)
class DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_sdrplay.DeviceInfo_serialNumber_get, _sdrplay.DeviceInfo_serialNumber_set)
    hwVersion = property(_sdrplay.DeviceInfo_hwVersion_get, _sdrplay.DeviceInfo_hwVersion_set)
    isTunerA = property(_sdrplay.DeviceInfo_isTunerA_get, _sdrplay.DeviceInfo_isTunerA_set)
    isTunerB = property(_sdrplay.DeviceInfo_isTunerB_get, _sdrplay.DeviceInfo_isTunerB_set)
    isRSPDuo = property(_sdrplay.DeviceInfo_isRSPDuo_get, _sdrplay.DeviceInfo_isRSPDuo_set)

    def __init__(self):
        _sdrplay.DeviceInfo_swiginit(self, _sdrplay.new_DeviceInfo())
    __swig_destroy__ = _sdrplay.delete_DeviceInfo

# Register DeviceInfo in _sdrplay:
_sdrplay.DeviceInfo_swigregister(DeviceInfo)
class ApiTiming(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    openDelay = property(_sdrplay.ApiTiming_openDelay_get, _sdrplay.ApiTiming_openDelay_set)
    selectDelay = property(_sdrplay.ApiTiming_selectDelay_get, _sdrplay.ApiTiming_selectDelay_set)
    updateDelay = property(_sdrplay.ApiTiming_updateDelay_get, _sdrplay.ApiTiming_updateDelay_set)
    initDelay = property(_sdrplay.ApiTiming_initDelay_get, _sdrplay.ApiTiming_initDelay_set)

    @staticmethod
    def getDefaultTiming():
        return _sdrplay.ApiTiming_getDefaultTiming()

    def __init__(self):
        _sdrplay.ApiTiming_swiginit(self, _sdrplay.new_ApiTiming())
    __swig_destroy__ = _sdrplay.delete_ApiTiming

# Register ApiTiming in _sdrplay:
_sdrplay.ApiTiming_swigregister(ApiTiming)
class StreamCallbackHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sdrplay.delete_StreamCallbackHandler

    def handleStreamData(self, xi, xq, numSamples):
        return _sdrplay.StreamCallbackHandler_handleStreamData(self, xi, xq, numSamples)

# Register StreamCallbackHandler in _sdrplay:
_sdrplay.StreamCallbackHandler_swigregister(StreamCallbackHandler)
class GainCallbackHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sdrplay.delete_GainCallbackHandler

    def handleGainChange(self, gRdB, lnaGRdB, currGain):
        return _sdrplay.GainCallbackHandler_handleGainChange(self, gRdB, lnaGRdB, currGain)

# Register GainCallbackHandler in _sdrplay:
_sdrplay.GainCallbackHandler_swigregister(GainCallbackHandler)
class PowerOverloadCallbackHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sdrplay.delete_PowerOverloadCallbackHandler

    def handlePowerOverload(self, isOverloaded):
        return _sdrplay.PowerOverloadCallbackHandler_handlePowerOverload(self, isOverloaded)

# Register PowerOverloadCallbackHandler in _sdrplay:
_sdrplay.PowerOverloadCallbackHandler_swigregister(PowerOverloadCallbackHandler)

def StreamACallback(xi, xq, params, numSamples, reset, cbContext):
    return _sdrplay.StreamACallback(xi, xq, params, numSamples, reset, cbContext)

def EventCallback(eventId, tuner, params, cbContext):
    return _sdrplay.EventCallback(eventId, tuner, params, cbContext)
class DeviceParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setSampleRate(self, sampleRateHz):
        return _sdrplay.DeviceParams_setSampleRate(self, sampleRateHz)

    def setPpm(self, ppm):
        return _sdrplay.DeviceParams_setPpm(self, ppm)

    def update(self):
        return _sdrplay.DeviceParams_update(self)
    __swig_destroy__ = _sdrplay.delete_DeviceParams

# Register DeviceParams in _sdrplay:
_sdrplay.DeviceParams_swigregister(DeviceParams)
class RxChannelParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setRfFrequency(self, frequencyHz):
        return _sdrplay.RxChannelParams_setRfFrequency(self, frequencyHz)

    def setBandwidth(self, bandwidthKHz):
        return _sdrplay.RxChannelParams_setBandwidth(self, bandwidthKHz)

    def setIFType(self, ifkHz):
        return _sdrplay.RxChannelParams_setIFType(self, ifkHz)

    def setGain(self, gainReduction, lnaState):
        return _sdrplay.RxChannelParams_setGain(self, gainReduction, lnaState)

    def setAgcControl(self, enable, setPoint=-60):
        return _sdrplay.RxChannelParams_setAgcControl(self, enable, setPoint)

    def update(self):
        return _sdrplay.RxChannelParams_update(self)
    __swig_destroy__ = _sdrplay.delete_RxChannelParams

# Register RxChannelParams in _sdrplay:
_sdrplay.RxChannelParams_swigregister(RxChannelParams)
class Device(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sdrplay.Device_swiginit(self, _sdrplay.new_Device())
    __swig_destroy__ = _sdrplay.delete_Device

    def open(self):
        return _sdrplay.Device_open(self)

    def close(self):
        return _sdrplay.Device_close(self)

    def getApiVersion(self):
        return _sdrplay.Device_getApiVersion(self)

    def getAvailableDevices(self):
        return _sdrplay.Device_getAvailableDevices(self)

    def selectDevice(self, device):
        return _sdrplay.Device_selectDevice(self, device)

    def releaseDevice(self):
        return _sdrplay.Device_releaseDevice(self)

    def getDeviceParams(self):
        return _sdrplay.Device_getDeviceParams(self)

    def getRxChannelParams(self, isTunerB=False):
        return _sdrplay.Device_getRxChannelParams(self, isTunerB)

    def setTiming(self, timing):
        return _sdrplay.Device_setTiming(self, timing)

    def getTiming(self):
        return _sdrplay.Device_getTiming(self)

    def startStreaming(self, streamCb, gainCb=0, powerCb=0):
        return _sdrplay.Device_startStreaming(self, streamCb, gainCb, powerCb)

    def startStreamingWithHandlers(self, streamHandler=None, gainHandler=None, powerHandler=None):
        return _sdrplay.Device_startStreamingWithHandlers(self, streamHandler, gainHandler, powerHandler)

    def stopStreaming(self):
        return _sdrplay.Device_stopStreaming(self)

    def getLastErrorMessage(self):
        return _sdrplay.Device_getLastErrorMessage(self)

# Register Device in _sdrplay:
_sdrplay.Device_swigregister(Device)

